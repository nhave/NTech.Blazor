@namespace NTech.Blazor

<CascadingValue Value="this">
    <div class="@Class" style="@Style">
        <div class="navtab-wrapper">
            <ul class="nav nav-tabs px-2">
                @foreach (var tab in Tabs)
                {
                    <li class="nav-item">
                        @if (!string.IsNullOrEmpty(tab.To))
                        {
                            <a class="@ClassBuilder.Build("nav-link", tab == ActiveTab ? "active" : "")" href="@tab.To" @onclick="() => SelectTab(tab)">
                                @if (!string.IsNullOrWhiteSpace(tab.Icon))
                                {
                                    <i class="@ClassBuilder.Build("bi", tab.Icon)"></i>
                                }
                                <div class="@ClassBuilder.Build(_breakpoint, string.IsNullOrWhiteSpace(tab.Icon) ? "" : "ms-2")">
                                    @tab.DisplayName
                                </div>
                            </a>
                        }
                        else
                        {
                            <button class="@ClassBuilder.Build("nav-link", tab == ActiveTab ? "active" : "")" @onclick="() => SelectTab(tab)">
                                @if (!string.IsNullOrWhiteSpace(tab.Icon))
                                {
                                    <i class="@ClassBuilder.Build("bi", tab.Icon)"></i>
                                }
                                <div class="@ClassBuilder.Build(_breakpoint, string.IsNullOrWhiteSpace(tab.Icon) ? "" : "ms-2")">
                                    @tab.DisplayName
                                </div>
                            </button>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="@ClassBuilder.Build(ContentClass, ActiveTab?.Class!)">
        @ChildContent
    </div>
</CascadingValue>

@code {
    internal List<Navtab> Tabs { get; set; } = new();
    public Navtab? ActiveTab { get; set; }

    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string ContentClass { get; set; } = string.Empty;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<string> OnChanged { get; set; }

    [Parameter] public Breakpoints Breakpoint { get; set; } = Breakpoints.None;

    private string _breakpoint => Breakpoint switch
    {
        Breakpoints.SM => "d-none d-sm-block",
        Breakpoints.MD => "d-none d-sm-block",
        Breakpoints.LG => "d-none d-lg-block",
        Breakpoints.XL => "d-none d-xl-block",
        Breakpoints.XXL => "d-none d-xxl-block",
        _ => ""
    };

    internal void AddTab(Navtab tab, bool active)
    {
        Tabs.Add(tab);
        if (ActiveTab is null || active)
            ActiveTab = tab;
        StateHasChanged();
    }

    internal async Task SelectTab(Navtab tab)
    {
        ActiveTab = tab;
        await OnChanged.InvokeAsync(tab.Name);
    }
}