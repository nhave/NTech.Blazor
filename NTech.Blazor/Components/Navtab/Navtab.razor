@namespace NTech.Blazor

@implements IDisposable
@inject NavigationManager NavigationManager

@if (Parent?.ActiveTab == this)
{
    @ChildContent
}

@code {
    [CascadingParameter] public NavtabMenu? Parent { get; set; }
    [Parameter] public string Name { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public string To { get; set; } = string.Empty;
    [Parameter] public bool Active { get; set; } = false;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public NavLinkMatch Match { get; set; } = NavLinkMatch.All;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    public bool IsActive => ShouldMatch();
	internal string DisplayName => string.IsNullOrWhiteSpace(Title) ? Name : Title;

    protected override void OnInitialized()
    {
        Parent?.AddTab(this, IsActive);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
        if (IsActive)
            Parent?.SelectTab(this).GetAwaiter().GetResult();
    }

    private bool ShouldMatch()
    {
        var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (!string.IsNullOrWhiteSpace(To))
        {
            if (Match == NavLinkMatch.All)
            {
                return string.Equals(currentUri.TrimEnd('/'), To.TrimEnd('/'), StringComparison.OrdinalIgnoreCase);
            }
            else
            {
                return currentUri.StartsWith(To, StringComparison.OrdinalIgnoreCase);
            }
        }
        else
        {
            return Active;
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
